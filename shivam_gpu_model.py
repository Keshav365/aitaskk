# -*- coding: utf-8 -*-
"""Shivam GPU Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sQFhqeN5jG-sdq8lbyhkTeF9ul9qxjQ3
"""

!pip install git+https://github.com/facebookresearch/detectron2.git

import os
import json
import numpy as np
import torch
import torchvision.transforms as T
from transformers import DetrForObjectDetection, DetrImageProcessor
from PIL import Image
import cv2

# Load DETR model
model = DetrForObjectDetection.from_pretrained("facebook/detr-resnet-50")
processor = DetrImageProcessor.from_pretrained("facebook/detr-resnet-50")

# Object detection in an uploaded video
cap = cv2.VideoCapture("/content/drive/MyDrive/YoloV3Tiny/sample.mp4")
out = cv2.VideoWriter("output_detection.mp4", cv2.VideoWriter_fourcc(*'mp4v'), 30, (int(cap.get(3)), int(cap.get(4))))

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    image = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
    encoding = processor(images=image, return_tensors="pt")
    outputs = model(**encoding)

    # Extract predictions
    logits = outputs.logits.softmax(-1)[0, :, :-1]
    bboxes = outputs.pred_boxes[0].detach().numpy()

    for logit, box in zip(logits, bboxes):
        if logit.max() > 0.7:  # Confidence threshold
            x1, y1, x2, y2 = (box * np.array([frame.shape[1], frame.shape[0], frame.shape[1], frame.shape[0]])).astype(int)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

    out.write(frame)

cap.release()
out.release()

# Generate a heatmap from CCTV footage
cap = cv2.VideoCapture("/content/drive/MyDrive/YoloV3Tiny/cctv.mp4")
heatmap = np.zeros((int(cap.get(4)), int(cap.get(3))), dtype=np.float32)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    image = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
    encoding = processor(images=image, return_tensors="pt")
    outputs = model(**encoding)

    bboxes = outputs.pred_boxes[0].detach().numpy()

    for box in bboxes:
        x1, y1, x2, y2 = (box * np.array([frame.shape[1], frame.shape[0], frame.shape[1], frame.shape[0]])).astype(int)
        heatmap[y1:y2, x1:x2] += 1

cap.release()

# Normalize and save heatmap
heatmap = (heatmap / heatmap.max() * 255).astype(np.uint8)
heatmap_color = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)
cv2.imwrite("output_heatmap.jpg", heatmap_color)

from google.colab import files
files.download("output_detection.mp4")

files.download("output_heatmap.jpg")